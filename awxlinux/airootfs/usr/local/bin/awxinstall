#!/bin/bash

# try umount , in the case the user restarted the script
umount -R /mnt &>/dev/null

set -e

# vars
ospart=""
efi=""
reg=""
cit=""
hostnm=""
username=""
kern=""
vaapi=""
hasLutr=""
cpuv=""
isSupp="0"
device=$(dmidecode | grep -i product\ name | grep -Po 'Name: \K[^"]*' | head -n1)
cpun=$(cat /proc/cpuinfo | grep 'model name' | sed -e 's/model name.*: //' | head -n 1)

function ask() {
    echo -ne "$1"
    read -r inpt
}

function isYes() {
	if [ "$1" == "y" ] || [ "$1" == "Y" ]; then
		echo 1
	elif [ "$1" == "n" ] || [ "$1" == "N" ]; then
		echo 0
	elif [ "$1" == "q" ] || [ "$1" == "Q" ]; then
		echo 3
	else
		echo 2
	fi
}

function pause() {
	echo -e "\n$1\n"
	read -n 1 -p "Press any key to continue.." aa
	echo -e "\n\n"
}

function wrongInp() {
	echo -e "wrong input\n"
}

function exitIns() {
	umount -R /mnt
	exit 0
}

function askPrintDisks() {
	while true; do
		ask "Do you want to list disks and partitions? [Y/n/q]: "

		ret=$(isYes "$inpt")
		if [ $ret -eq 1 ]; then
			pause "A list of all your disks will now be printed.\nUse arrow keys to scroll, press q to go back"
            fdisk -l | less
			break
        elif [ $ret -eq 3 ]; then
            exit 0
		elif [ $ret -eq 0 ]; then
			break
		else
			wrongInp
		fi
	done
}

function printHead() {
	clear
	echo -e "    _        __  __  _    _              \n" \
		"  /_\__ __ _\ \/ / | |  (_)_ _ _  ___ __\n" \
		" / _ \ V  V />  <  | |__| | ' \ || \ \ /\n" \
		"/_/ \_\_/\_//_/\_\ |____|_|_||_\_,_/_\_\ \n\n"
}

# set cpu vendor
if [[ $cpun =~ "Intel" ]]; then
	cpuv="Int"
else
	cpuv="amd"
fi

printHead
echo -e "Supported devices:\n" \
		"\t* GPD Win Max (2020, 2021)\n" \
		"\t* GPD Win 3\n\n" \
		"Additional steps and fixes may be required for other devices!\n\n" \
		"This will install ArchLinux with a minimal xfce4 environment,\n" \
		"customized and optimized for GPD devices.\n\n" \
		"A EFI partition is required!" \
		"\nIf you don't have one, you can create it during installation.\n\n" \
		"A internet connection is also required!\n" \
		"Plug an ethernet cable or run wifi-menu to setup a wireless connection.\n" \
		"See ArchWiki for more info.\n\n"

ahah="ok"
while true; do
	ask "Are you ready? [Y/n/q]: "

	ret=$(isYes "$inpt")
	if [ $ret -eq 1 ]; then
		clear
		break
	elif [ $ret -eq 3 ]; then
		exit 0
	elif [ $ret -eq 0 ]; then
		case $ahah in
			"ok")
				echo -e "well, i can wait..\n"
				ahah="mh"
				sleep 1
				;;
			"mh")
				echo -e "still waiting..\n"
				ahah="bruh"
				sleep 1
				;;
			"bruh")
				echo -e "enough, next monday!\n"
				exit 1
				;;
			*)
				echo -e "eh? exiting\n"
				exit 1
				;;
		esac
	else
		wrongInp
	fi
done

printHead
while true; do
	ask "Do you want to run cfdisk to format/create partitions? [Y/n/q]: "

	ret=$(isYes "$inpt")
	if [ $ret -eq 1 ]; then
		while true; do
			askPrintDisks

			ask "Select a disk (example sda or nvme0n1): "
			cfdisk "/dev/$inpt"
			break 2
		done
	elif [ $ret -eq 3 ]; then
		exit 0
	elif [ $ret -eq 0 ]; then
		break
	else
		wrongInp
	fi
done

printHead
pause "The next step will ask you to format your linux partition.\nThis is required for a clean install,\nplease make sure you have a backup of all important data!"

while true; do
	askPrintDisks

	ask "select partition to format to ext4 (example sda2 or nvme0n1p2): "
	ospart="$inpt"

	ask "$ospart selected, are you sure? [Y/n/q]: "

	ret=$(isYes "$inpt")
	if [ $ret -eq 1 ]; then
		mkfs.ext4 -F "/dev/$ospart"
		if [ $? -eq 0 ]; then
			break
		fi
	elif [ $ret -eq 3 ]; then
		exit 0
	elif [ $ret -eq 0 ]; then
		continue
	else
		wrongInp
	fi
done

printHead
while true; do
	askPrintDisks

	ask "select EFI partition to mount as /boot (example sda1 or nvme0n1p1): "
	efi="$inpt"

	ask "$efi selected, are you sure? [Y/n/q]: "

	ret=$(isYes "$inpt")
	if [ $ret -eq 1 ]; then
		break
	elif [ $ret -eq 3 ]; then
		exit 0
	elif [ $ret -eq 0 ]; then
		continue
	else
		wrongInp
	fi
done

printHead
pause "The next step will ask you to format your EFI partition.\nThis is required if you created it with this installer,\nif you already had a EFI partition, you can say N"

while true; do
	ask "Do you want to format the EFI partition? [Y/n/q]: "

	ret=$(isYes "$inpt")
	if [ $ret -eq 1 ]; then
		mkfs.fat -F32 "/dev/$efi"
		break
	elif [ $ret -eq 3 ]; then
		exit 0
	elif [ $ret -eq 0 ]; then
		break
	else
		wrongInp
	fi
done

timedatectl set-ntp true
mount "/dev/$ospart" /mnt
mkdir -p /mnt/boot
mount "/dev/$efi" /mnt/boot
pacstrap /mnt base linux linux-firmware
genfstab -U /mnt >> /mnt/etc/fstab

printHead
while true; do
	ask "Do you want to print a list of all available regions? [Y/n/q]: "

	ret=$(isYes "$inpt")
	if [ $ret -eq 1 ]; then
		ls /mnt/usr/share/zoneinfo | less
		break
	elif [ $ret -eq 3 ]; then
		exitIns
	elif [ $ret -eq 0 ]; then
		break
	else
		wrongInp
	fi
done

while true; do
	ask "set your region: "
	reg="$inpt"

	ask "$reg, are you sure? [Y/n/q]: "

	ret=$(isYes "$inpt")
	if [ $ret -eq 1 ]; then
		break
	elif [ $ret -eq 3 ]; then
		exitIns
	elif [ $ret -eq 0 ]; then
		continue
	else
		wrongInp
	fi
done

while true; do
	ask "Do you want to print a list of all available cities? [Y/n/q]: "

	ret=$(isYes "$inpt")
	if [ $ret -eq 1 ]; then
		ls "/mnt/usr/share/zoneinfo/$reg" | less
		break
	elif [ $ret -eq 3 ]; then
		exitIns
	elif [ $ret -eq 0 ]; then
		break
	else
		wrongInp
	fi
done

while true; do
	ask "set your city: "
	cit="$inpt"

	ask "$cit, are you sure? [Y/n/q]: "

	ret=$(isYes "$inpt")
	if [ $ret -eq 1 ]; then
		break
	elif [ $ret -eq 3 ]; then
		exitIns
	elif [ $ret -eq 0 ]; then
		continue
	else
		wrongInp
	fi
done

ln -sf "/mnt/usr/share/zoneinfo/$reg/$cit" /mnt/etc/localtime
sed -i "s/tzplaceholder/$reg\/$cit/" configs/home/user/.config/xfce4/xfconf/xfce-perchannel-xml/xfce4-panel.xml
arch-chroot /mnt hwclock --systohc
sed -i 's/#en_US.UTF-8/en_US.UTF-8/' /mnt/etc/locale.gen
arch-chroot /mnt locale-gen
echo "LANG=en_US.UTF-8" > /mnt/etc/locale.conf

printHead
while true; do
	ask "set device name: "
	hostnm="$inpt"

	ask "$hostnm, are you sure? [Y/n/q]: "

	ret=$(isYes "$inpt")
	if [ $ret -eq 1 ]; then
		break
	elif [ $ret -eq 3 ]; then
		exitIns
	elif [ $ret -eq 0 ]; then
		continue
	else
		wrongInp
	fi
done

echo "$hostnm" > /mnt/etc/hostname
echo "127.0.0.1 localhost" >> /mnt/etc/hosts
echo "::1       localhost" >> /mnt/etc/hosts
echo "127.0.1.1 $hostnm.localdomain $hostnm" >> /mnt/etc/hosts
arch-chroot /mnt mkinitcpio -P

printHead

echo -e "set root password:"
arch-chroot /mnt passwd

printHead
while true; do
	ask "set your user account name: "
	username="$inpt"

	ask "$username, are you sure? [Y/n/q]: "

	ret=$(isYes "$inpt")
	if [ $ret -eq 1 ]; then
		break
	elif [ $ret -eq 3 ]; then
		exitIns
	elif [ $ret -eq 0 ]; then
		continue
	else
		wrongInp
	fi
done

arch-chroot /mnt useradd -m -G wheel -s /bin/bash "$username"
printHead
echo -e "set $username password:"
arch-chroot /mnt passwd "$username"

# pacman and makepkg setup
sed -i 's/#Color/Color\nILoveCandy/' /mnt/etc/pacman.conf
sed -i 's/#ParallelDownloads/ParallelDownloads/' /mnt/etc/pacman.conf
sed -i 's/#\[multilib\]/\[multilib\]/' /mnt/etc/pacman.conf
sed -i '/\[multilib\]/{n;s/.*/Include = \/etc\/pacman.d\/mirrorlist/}' /mnt/etc/pacman.conf
echo -e "\n[gpdaurgit]\nSigLevel = Never\nServer = https://github.com/A-w-x/GPD-Linux-AUR-repo/releases/download/packages" >> /mnt/etc/pacman.conf
sed -i 's/#MAKEFLAGS="-j2"/MAKEFLAGS="-j8"/' /mnt/etc/makepkg.conf
sed -i 's/-march=x86-64 -mtune=generic/-mtune=native/' /mnt/etc/makepkg.conf
sed -i 's/#RUSTFLAGS="-C opt-level=2"/RUSTFLAGS="-C opt-level=2 -C target-cpu=native"/' /mnt/etc/makepkg.conf

# temp? fix pkgbuild rpcs3 and maybe others
sed -i 's/ -Wp,-D_GLIBCXX_ASSERTIONS//' /mnt/etc/makepkg.conf

arch-chroot /mnt pacman -Syy
arch-chroot /mnt pacman -S --noconfirm --overwrite \* base-devel \
	xorg-server xf86-input-libinput xorg-xinput xorg-xinit \
	pipewire pipewire-pulse pipewire-alsa gst-plugin-pipewire pavucontrol sof-firmware alsa-ucm-conf \
	networkmanager network-manager-applet nm-connection-editor dhcpcd blueman \
	polkit polkit-gnome xfce4-notifyd notification-daemon dbus-broker xdg-utils udisks2 util-linux \
	tlp x86_energy_perf_policy ethtool \
	thunar thunar-volman thunar-archive-plugin thunar-media-tags-plugin gvfs gvfs-mtp gvfs-smb file-roller tumbler ffmpegthumbnailer \
	xfce4-battery-plugin xfce4-panel xfce4-pulseaudio-plugin xfce4-terminal xfce4-power-manager xfce4-settings xfce4-screenshooter \
	xfwm4 xfce4-xkb-plugin xfce4-appfinder xfce4-session garcon exo conky \
	nano git clang ccache git-lfs cmake gedit schedtool sed \
	ttf-dejavu ttf-liberation noto-fonts-emoji noto-fonts adobe-source-han-sans-otc-fonts \
	firefox conky mpv feh ntfs-3g os-prober wget curl \
	unrar p7zip unzip mame-tools

if [ $? -eq 1 ]; then
	echo -e "\n\nERROR: Unable to install packages!\nInstallation failed, exiting.."
	umount -R /mnt
	exit 1
fi

# vendor specific packages
if [ "$cpuv" == "Int" ]; then
	vaapi="iHD"

	arch-chroot /mnt pacman -S --noconfirm --overwrite \* xf86-video-intel \
		intel-media-driver intel-gpu-tools libvdpau-va-gl intel-ucode
else
	vaapi="radeonsi"

	arch-chroot /mnt pacman -S --noconfirm --overwrite \* xf86-video-amdgpu amd-ucode radeontop
fi

if [ ! -d "/mnt/home/$username/.cache/sessions" ]; then
	mkdir -p "/mnt/home/$username/.cache/sessions"
fi

# disable xfce sessions
arch-chroot /mnt chmod 400 "/home/$username/.cache/sessions"

# remove old install if the user restarted the script
if [ -d "inst" ]; then
	rm -R inst
fi

# install custom configs
mkdir inst
cp -a configs/. inst
mv inst/home/user "inst/home/$username"
cp -a inst/. /mnt

cp /mnt/etc/X11/xinit/xinitrc "/mnt/home/$username/.xinitrc"
head -n -6 "/mnt/home/$username/.xinitrc" > "/mnt/home/$username/.bak"
mv "/mnt/home/$username/.bak" "/mnt/home/$username/.xinitrc"
sed -i 's/AutoMount=true/AutoMount=false/' /mnt/usr/share/gvfs/mounts/network.mount
echo -e "\n$username ALL=(ALL) ALL" >> /mnt/etc/sudoers
echo "$username $hostnm =NOPASSWD: /usr/bin/systemctl poweroff,/usr/bin/systemctl halt,/usr/bin/systemctl reboot" >> /mnt/etc/sudoers
echo "include \"/home/$username/.gtkrc-2.0.mine\"" > "/mnt/home/$username/.gtkrc-2.0"
sed -i "s/CPUPLACEHOLDER/${cpun}/" "/mnt/home/$username/.config/conky/conky.conf"
sed -i 's/MODULES=()/MODULES=(i915)/' /mnt/etc/mkinitcpio.conf
echo "dev.i915.perf_stream_paranoid=0" > /mnt/etc/sysctl.d/99-i915.conf

arch-chroot /mnt mkinitcpio -P

cat <<- EOF > "/mnt/home/$username/.xinitp2"
#!/bin/sh

# TEMP: waiting for full wayland support
# part 2 of .xinitrc
# needed to workaorund rotation issues if set by xfce on boot

feh --no-fehbg --bg-fill '/home/$username/.wallpaper/bg.jpg'
sleep 3
feh --no-fehbg --bg-fill '/home/$username/.wallpaper/bg.jpg'

# conky temp workaround
for hm in \$(ls /sys/class/hwmon/hwmon*/name);
do
	n=\$(cat "\$hm")
	nn=\${hm:22:1}

	if [ "\$n" == "coretemp" ]; then
			sed -i -e "76s/hwmon [0-9]/hwmon \$nn/" /home/$username/.config/conky/conky.conf
			break
	fi
done

conky &
EOF

chmod +x "/mnt/home/$username/.xinitp2"
chmod +x "/mnt/home/$username/.firstsetup"

cat <<- EOF >> "/mnt/home/$username/.bashrc"

	# custom start

	alias up='sudo pacman -Syuu'
	alias yup='yay -Syuu'
	alias inst='sudo pacman -S'
	alias unst='sudo pacman -U'
	alias yinst='yay -S --answerclean N --answerdiff N --answeredit N'
	alias del='sudo pacman -Rns'
	alias updgrub='sudo grub-mkconfig -o /boot/grub/grub.cfg'
	alias enabootsteam="sed -i 's/steam -bigpicture &//' /home/$username/.xinitp2 && echo 'steam -bigpicture &' >> /home/$username/.xinitp2"
	alias disabootsteam="sed -i 's/steam -bigpicture &//' /home/$username/.xinitp2"

	# export
	export DEVICE_PROD_ID=$device
	export EDITOR=gedit
	export VISUAL=gedit
	export PATH="/usr/lib/ccache/bin/:\$PATH"
	export USE_CCACHE=1
	export _JAVA_OPTIONS='-Dawt.useSystemAAFontSettings=on -Dswing.aatext=true -Dswing.defaultlaf=com.sun.java.swing.plaf.gtk.GTKLookAndFeel'
	export LIBVA_DRIVER_NAME=$vaapi
EOF

cat <<- EOF >> "/mnt/home/$username/.bash_profile"

if [ -z "\${DISPLAY}" ] && [ "\${XDG_VTNR}" -eq 1 ]; then
  exec startx
fi
EOF

cat <<- EOF >> "/mnt/home/$username/.xinitrc"

	export GTK2_RC_FILES="\$HOME/.gtkrc-2.0"
	
	nm-applet &
	/usr/lib/polkit-gnome/polkit-gnome-authentication-agent-1 &
	touchegg &
	~/.xinitp2 &
	~/.firstsetup &
	exec startxfce4
EOF

mkdir -p /mnt/etc/systemd/system/getty@tty1.service.d
cat <<- EOF > "/mnt/etc/systemd/system/getty@tty1.service.d/override.conf"
[Service]
ExecStart=
ExecStart=-/usr/bin/agetty --autologin $username --noclear %I $TERM
EOF

# temp helper to install yay
cat <<- EOF > "/mnt/home/$username/instyay"
#!/bin/bash
cd home/$username
wget https://aur.archlinux.org/cgit/aur.git/snapshot/yay.tar.gz
tar -xvf yay.tar.gz
cd yay
makepkg -rsi --noconfirm
EOF

# fix permissions
arch-chroot /mnt chown -R "$username:$username" "home/$username"
arch-chroot /mnt chown -R "$username:$username" "/opt"

# install yay (AUR pkg manager)
chmod +x "/mnt/home/$username/instyay"
arch-chroot /mnt sudo -u $username ./home/$username/instyay
rm -R "/mnt/home/$username/yay"
rm "/mnt/home/$username/yay.tar.gz"
rm "/mnt/home/$username/instyay"

# add required packages from aur
arch-chroot /mnt sudo -u $username yay -S --noconfirm papirus-icon-theme papirus-folders-git vimix-gtk-themes touchegg-git tlpui-git
arch-chroot /mnt papirus-folders -C yaru --theme Papirus

arch-chroot /mnt systemctl enable tlp
arch-chroot /mnt systemctl enable NetworkManager
arch-chroot /mnt systemctl enable bluetooth
arch-chroot /mnt systemctl enable fstrim.timer
arch-chroot /mnt systemctl enable touchegg
arch-chroot /mnt systemctl disable dbus
arch-chroot /mnt systemctl --global enable dbus-broker

case $device in
	"G1619-01") # max 20
		kern="wmax20-tkg"
		isSupp="1"

		yes | arch-chroot /mnt pacman -S wmax20-tkg wmax20-tkg-headers mesa-wmax20-tkg-git lib32-mesa-wmax20-tkg-git gpd-winmax-mutekey-fix
		arch-chroot /mnt sudo -u $username yay -S --noconfirm intel-undervolt

		echo -e "\n[wmax20emus]\nSigLevel = Never\nServer = https://github.com/A-w-x/GPD-Linux-AUR-repo/releases/download/wmax20emus" >> /mnt/etc/pacman.conf
		sed -i 's/--daemon/--daemon 6 31/' /mnt/lib/systemd/system/touchegg.service
		echo "export VDPAU_DRIVER=va_gl" >> "/mnt/home/$username/.bashrc"

		# set intel-undervolt
		sed -i "s/'CPU' 0/'CPU' -50/" /mnt/etc/intel-undervolt.conf
		sed -i "s/'GPU' 0/'GPU' -50/" /mnt/etc/intel-undervolt.conf
		sed -i "s/'CPU Cache' 0/'CPU Cache' -50/" /mnt/etc/intel-undervolt.conf
		sed -i "s/'System Agent' 0/'System Agent' -20/" /mnt/etc/intel-undervolt.conf
		sed -i "s/interval 5000/interval 35000/" /mnt/etc/intel-undervolt.conf
		;;
	"G1618-03"|"G1619-03") # win3 | max 21
		kern="wmaxw3-tgl-tkg"
		isSupp="1"

		yes | arch-chroot /mnt pacman -S wmaxw3-tgl-tkg wmaxw3-tgl-tkg-headers mesa-wmax21w3-tkg-git lib32-mesa-wmax21w3-tkg-git

		if [ "$device" == "G1618-03" ]; then
			arch-chroot /mnt sudo -u $username yay -S --noconfirm goodix-gpdwin3-dkms
			sed -i 's/--daemon/--daemon 6 29/' /mnt/lib/systemd/system/touchegg.service
		else
			yes | arch-chroot /mnt pacman -S gpd-winmax-mutekey-fix
			sed -i 's/--daemon/--daemon 6 31/' /mnt/lib/systemd/system/touchegg.service
		fi

		echo -e "\n[wmax21w3emus]\nSigLevel = Never\nServer = https://github.com/A-w-x/GPD-Linux-AUR-repo/releases/download/wmax21w3emus" >> /mnt/etc/pacman.conf
		
		echo "options snd-intel-dspcfg dsp_driver=1" > /mnt/etc/modprobe.d/alsa-base.conf
		echo "export VDPAU_DRIVER=va_gl" >> "/mnt/home/$username/.bashrc"
		sed -i 's/eDP1/DSI1/' /mnt/etc/X11/xorg.conf.d/30-monitor.conf
		;;
	"G1619-02") # max 21 amd - thanks AhmadJSabt
		kern="wmax21amd-tkg"
		isSupp="1"

		yes | arch-chroot /mnt pacman -S wmax21amd-tkg wmax21amd-tkg-headers mesa-wmax21amd-tkg-git lib32-mesa-wmax21amd-tkg-git gpd-winmax-mutekey-fix igb-dkms

		echo -e "\n[wmax21amdemus]\nSigLevel = Never\nServer = https://github.com/A-w-x/GPD-Linux-AUR-repo/releases/download/wmax21amdemus" >> /mnt/etc/pacman.conf
		sed -i 's/--daemon/--daemon 6 31/' /mnt/lib/systemd/system/touchegg.service
		;;
	*)
		if [ "$cpuv" == "Int" ]; then
			arch-chroot /mnt pacman -S --noconfirm mesa vulkan-intel lib32-mesa lib32-vulkan-intel vulkan-mesa-layers \
				lib32-vulkan-mesa-layers
		else
			arch-chroot /mnt pacman -S --noconfirm mesa vulkan-radeon libva-mesa-driver mesa-vdpau lib32-mesa \
				lib32-libva-mesa-driver lib32-vulkan-mesa-layers vulkan-mesa-layers lib32-mesa-vdpau
		fi
		;;
esac

arch-chroot /mnt pacman -Syy

printHead
echo -e "If you want to play pc games, you can install the pc games pack.\n" \
		"The pc games pack includes:\n" \
		"steam, heroic launcher, lutris, proton-ge, gamescope, wine, winetricks.\n"

while true; do
	ask "Do you want to install the pc games pack? [Y/n/q]: "

	ret=$(isYes "$inpt")
	if [ $ret -eq 1 ]; then
		hasLutr="1"
		
		arch-chroot /mnt pacman -S --noconfirm steam wine wine-mono wine-gecko winetricks lutris \
			vkd3d lib32-vkd3d wqy-zenhei lib32-libcanberra gamescope
		arch-chroot /mnt sudo -u $username yay -S --noconfirm heroic-games-launcher-bin proton-ge-custom-bin

		# steam big picture focus fix
		echo "export SDL_VIDEO_MINIMIZE_ON_FOCUS_LOSS=0" >> "/mnt/home/$username/.bashrc"

		printHead
		while true; do
			echo -e "You can start Steam Big Picture at startup.\n" \
					"It will not replace the desktop and you will still have access to it.\n\n" \
					"To add or remove Steam Big Picture to/from startup, type in a terminal:\n" \
					"enabootsteam - Add Steam Big Picture to startup\n" \
					"disabootsteam - Remove Steam Big Picture from startup\n\n" \

			ask "Do you want to run Steam Big Picture at startup? [Y/n/q]: "

			ret=$(isYes "$inpt")
			if [ $ret -eq 1 ]; then
				echo "steam -bigpicture &" >> "/mnt/home/$username/.xinitp2"
				break
			elif [ $ret -eq 3 ]; then
				exitIns
			elif [ $ret -eq 0 ]; then
				break
			else
				wrongInp
			fi
		done

		printHead
		echo -e "If you want a performance overlay, you can install MangoHud now.\n" \
				"In addition, GOverlay, a GUI application to customize MangoHud,\n" \
				"will be installed.\n"

		while true; do
			ask "Do you want to install MangoHud and GOverlay? [Y/n/q]: "

			ret=$(isYes "$inpt")
			if [ $ret -eq 1 ]; then
				arch-chroot /mnt pacman -S --noconfirm vulkan-tools mesa-demos
				arch-chroot /mnt sudo -u $username yay -S --noconfirm vkbasalt goverlay-bin lib32-mangohud
				break
			elif [ $ret -eq 3 ]; then
				exitIns
			elif [ $ret -eq 0 ]; then
				break
			else
				wrongInp
			fi
		done

		break
	elif [ $ret -eq 3 ]; then
		exitIns
	elif [ $ret -eq 0 ]; then

		# clean up
		rm /mnt/usr/share/applications/steam-big-picture-launcher.desktop
		break
	else
		wrongInp
	fi
done

if [ "$isSupp" == "1" ]; then
	printHead

	echo -e "A pack of optimized emulators for this device is available!\n" \
			"The following optimized emulators will be installed:\n" \
			"citra-canary, dolphin, duckstation, flycast, mgba, pcsx2, ppsspp,\n" \
			"rpcs3, xemu, pcem, melonds.\n" \
			"In addition, the following emulators will be installed:\n" \
			"scummvm, retroarch, ryujinx, cemu, yuzu.\n"

	while true; do
		ask "Do you want to install the emulators pack? [Y/n/q]: "

		ret=$(isYes "$inpt")
		if [ $ret -eq 1 ]; then
			arch-chroot /mnt sudo -u $username yay -S --noconfirm wolfssl cubeb cpp-httplib-compiled discord-rpc-git yuzu-mainline-bin
			arch-chroot /mnt pacman -S --noconfirm citra-canary-git dolphin-emu-git dolphin-emu-nogui-git \
				duckstation-git flycast-git libmgba-git melonds-git mgba-qt-git mgba-sdl-git pcem-git pcsx2-git \
				ppsspp-common-git ppsspp-git ppsspp-headless-git ppsspp-qt-git rpcs3-git xemu-git scummvm \
				fmt boost sirit-git pcsx2man retroarch
				
			if [ "$hasLutr" == "" ]; then # cemu dependencies
				arch-chroot /mnt pacman -S --noconfirm wine wine-mono wine-gecko winetricks lutris vkd3d lib32-vkd3d
			fi

			# ryujinx, download a build, user can update once booted
			wget https://ci.appveyor.com/api/buildjobs/eqbhf0jol4w1byi8/artifacts/ryujinx-1.0.7125-linux_x64.tar.gz
			tar -xvf ryujinx-1.0.7125-linux_x64.tar.gz
			cp -a publish/. /mnt/opt/ryujinx
			arch-chroot /mnt ln -s /opt/ryujinx/Ryujinx /usr/bin/ryujinx
			arch-chroot /mnt chown -R "$username:$username" /opt/ryujinx
			
			# cemu, download a build, user can update once booted
			cmver="1.25.6"
			chver="1251c_0575"
			
			wget "https://cemu.info/releases/cemu_$cmver.zip"
			wget "https://files.sshnuke.net/cemuhook_$chver.zip"
			unzip "cemu_$cmver.zip"
			mv "cemu_$cmver" Cemu
			unzip "cemuhook_$chver.zip" -d Cemu
			wget https://lutris.nyc3.cdn.digitaloceanspaces.com/games/cemu/sharedFonts.tar.xz
			tar -xvf sharedFonts.tar.xz --directory Cemu
			cd Cemu
			wget https://raw.githubusercontent.com/dnmodder/cemu_lutris_files/master/cemuhook.ini
			mkdir controllerProfiles
			cd controllerProfiles
			wget https://raw.githubusercontent.com/AccountOneOff/lutris_files/master/Xbox_Controller.txt
			wget https://raw.githubusercontent.com/A-w-x/GPD-Linux-AUR-repo/main/config_files/emulators/cemu/controllerProfiles/gpd.txt
			cd ../..
			mkdir -p /mnt/opt/Cemu/drive_c
			mv Cemu /mnt/opt/Cemu/drive_c/Cemu
			arch-chroot /mnt chown -R "$username:$username" /opt/Cemu
			
			
			# scripts
			arch-chroot /mnt chmod +x /opt/scripts/savefolderlink.sh
			arch-chroot /mnt chmod +x /opt/scripts/romsfolderlink.sh
			arch-chroot /mnt ln -s /opt/scripts/savefolderlink.sh /usr/local/bin/savefolderlink
			arch-chroot /mnt ln -s /opt/scripts/romsfolderlink.sh /usr/local/bin/romsfolderlink
			break
		elif [ $ret -eq 3 ]; then
			exitIns
		elif [ $ret -eq 0 ]; then

			# remove unneeded files
			rm -R /mnt/opt/scripts
			rm -R "/mnt/home/$username/.config/retroarch"
			rm /mnt/usr/share/applications/pcem.desktop
			rm /mnt/usr/share/applications/ryujinx.desktop
			rm -R "/mnt/home/$username/.local/share/applications"
			break
		else
			wrongInp
		fi
	done
fi

printHead
while true; do
	ask "Do you want to create a swap file? [Y/n/q]: "

	ret=$(isYes "$inpt")
	if [ $ret -eq 1 ]; then
		while true; do
			ask "Set swap size in GB (for ex. 1,2,4 etc..): "

			ret="$inpt"
			re='^[0-9]+$'

			if ! [[ $ret =~ $re ]]; then
				wrongInp
			else
				dd if=/dev/zero of=/mnt/swapfile bs=1M count=$(($ret * 1024)) status=progress
				chmod 600 /mnt/swapfile
				mkswap /mnt/swapfile
				echo "/swapfile none swap defaults 0 0" >> /mnt/etc/fstab
				echo "vm.swappiness=0" > /mnt/etc/sysctl.d/90-swapfile.conf
				break
			fi
		done
		
		break
	elif [ $ret -eq 0 ]; then
		break
	elif [ $ret -eq 3 ]; then
		exitIns
	else
		wrongInp
	fi
done

printHead
while true; do
	ask "Do you want to enable wireless/bluetooth support for Xbox One controllers? [Y/n/q]: "

	ret=$(isYes "$inpt")
	if [ $ret -eq 1 ]; then
		arch-chroot /mnt sudo -u $username yay -S --noconfirm xpadneo-dkms-git
		break
	elif [ $ret -eq 0 ]; then
		break
	elif [ $ret -eq 3 ]; then
		exitIns
	else
		wrongInp
	fi
done

printHead
echo -e "\A bootloader is required to boot the new OS.\n" \
		"If this is the only OS in your device, or\n" \
		"if you have Windows and this is a new linux install,\n" \
		"you will be able to install a bootloader now.\n\n" \
		"Say N if you want to manually manage your bootloader entries,\n" \
		"or you are using a different bootloader.\n\n"

if [ "$kern" != "" ]; then
	echo -e "If you say N, remember to add $kern kernel to your bootloader entries!!\n\n"
fi

while true; do
	ask "Do you want to install GRUB bootloader? [Y/n/q]: "

	ret=$(isYes "$inpt")
	if [ $ret -eq 1 ]; then
		arch-chroot /mnt pacman -S --noconfirm grub efibootmgr
		arch-chroot /mnt grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB

		if [ $? -eq 1 ]; then
			echo -e "\nERROR: installation failed, exiting..\n"
			umount -R /mnt
			exit 1
		fi

		echo "GRUB_DISABLE_OS_PROBER=false" >> /mnt/etc/default/grub
		arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg
		break
	elif [ $ret -eq 0 ]; then
		break
	elif [ $ret -eq 3 ]; then
		exitIns
	else
		wrongInp
	fi
done

echo -e "\n\n #############################\n" \
            "#   INSTALLATION COMPLETE!  #\n" \
            "#############################\n\n"

while true; do
	ask "Do you want to reboot now? [Y/n/q]: "

	ret=$(isYes "$inpt")
	if [ $ret -eq 1 ]; then
		umount -R /mnt
		reboot
	elif [ $ret -eq 0 ]; then
		break
	elif [ $ret -eq 3 ]; then
		exitIns
	else
		wrongInp
	fi
done
